//---------------------------------------------------------------------------
// WordFreq.java              by Dale/Joyce/Weems                   Chapter 7
//
// Defines word-frequency pairs
//---------------------------------------------------------------------------

import java.text.DecimalFormat;

public class WordFreq implements Comparable<WordFreq>
{
  private String word;
  private int freq;

  DecimalFormat fmt = new DecimalFormat("00000");

  public WordFreq(String newWord)
  {
    word = newWord;
    freq = 0;
   }

  public String getWordIs(){return word;}
  public int getFreq(){return freq;}

  public void inc()
  {
    freq++;
  }

  public int compareTo(WordFreq other)
  {
    return this.word.compareTo(other.word); 
  }

  public String toString()
  {
    return(fmt.format(freq) + " " + word);
  }

  // Autogenerated by VS Code
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    //result = prime * result + ((fmt == null) ? 0 : fmt.hashCode()); irrelevant
    result = prime * result + freq;
    result = prime * result + ((word == null) ? 0 : word.hashCode());
    return result;
  }

  // Autogenerated by VS Code
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    WordFreq other = (WordFreq) obj;
    if (freq != other.freq)
      return false;
    if (word == null) {
      if (other.word != null)
        return false;
    } else if (!word.equals(other.word))
      return false;
    return true;
  }
}
 